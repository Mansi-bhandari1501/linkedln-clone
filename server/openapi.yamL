openapi: "3.0.0"
info:
  title: LinkedIn Clone

  version: "1.0.0"
security:
     - JWT: []
servers:
  - url: http://localhost:8080
paths:
  /users/register:
    post:
      tags:
        - Users
      summary: Create a new user
      description: Creates a new user
      requestBody:
        description: Request to create new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        '201':
          description: user Register Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersSchema'
        '409':
            description: Duplicate key error
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: The provided email already exists
        '404':
          description: 'Not Found: This response is shown if the request for information is not there or it could not be imported'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /users:                
    get:
      summary: Get a list of users
      description: Returns an array containing all the users
      operationId: getUsers
      tags:
        - Users
      responses:
        "200":
          description: get users data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FetchUsersResponse"
        "400":
          description: Invalid request payload
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  
  /users/login:
   post:
      tags:
        - Users
      summary: login existing user
      description: login existing user
      requestBody:
        description: Request to login the user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '200':
          description: login successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginResponse'
        
        '404':
          description: 'Not Found: This response is shown if the request for information is not there or it could not be imported'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /posts:
   post:
      tags:
        - Posts
      summary: create new post 
      description: create new post 
      requestBody:
        description: Request to create new post
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createPostRequest'
        required: true
      responses:
        '200':
          description: login successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginResponse'
        
        '404':
          description: 'Not Found: This response is shown if the request for information is not there or it could not be imported'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
   get:
      summary: Get all posts
      description: Get an existing test
      parameters:
        - name: JWT token
          in: header
          required: true
          description: The UUID of the test
          schema:
            type: string
            format: string
            example: a2f6b8d7-8e5c-4023-913f-6f81d4ca92b0
      tags:
        - Posts
      # parameters:
      #   - name: 'advisorId'
      #     in: path
      #     required: true
      #     description: The UUID of advisor
      #     example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      #     schema:
      #       type: string
      #       format: uuid
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FetchPostsResponse"
        "400":
          description: Invalid request payload
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided advisorId is not valid, 1234
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Advisor not found
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
   patch:
      tags:
        - Advisors
      parameters:
        - name: 'advisorId'
          in: path
          required: true
          description: The UUID of advisor
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
          schema:
            type: string
            format: uuid
      summary: Restore deleted advisor
      description: Restores the advisor and set the status to active. Returns a message after restoring the advisor
      responses:
        '200':
          description: Advisor restored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Advisor restored successfully.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Advisor not found
        '400':
          description: Invalid request payload
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided advisorId is not valid, 1234
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
   put:
      tags:
        - Advisors
      parameters:
        - name: 'advisorId'
          in: path
          required: true
          description: The UUID of advisor
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
          schema:
            type: string
            format: uuid
      summary: Edit the advisor
      description: Updates the advisor
      requestBody:
        description: Request to edit advisor
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditAdvisorRequest'
        required: true
      responses:
        '200':
          description: Advisor updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Advisor edited successfully.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Advisor not found
        '400':
          description: Invalid request payload
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided advisorId is not valid, 1234 
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
   delete:
      tags:
        - Advisors
      parameters:
        - name: 'advisorId'
          in: path
          required: true
          description: The UUID of advisor
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
          schema:
            type: string
            format: uuid
      summary: Delete the advisor
      description: Deletes the advisor and set the status to inactive. Returns a message after deleting the advisor
      requestBody:
        description: Request to delete advisor
        content:
          application/json:
            schema:
              type: object
              properties:
                deletedBy:
                  type: string
                  example: user@zenmonk.tech    
        required: true
      responses:
        '200':
          description: Advisor deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Advisor deleted successfully.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Advisor not found
        '400':
          description: Invalid request payload
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided advisorId is not valid, 1234
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /roles:
    get:
      summary: Get a list of roles
      description: Returns an array containing all the roles
      operationId: getRoles
      tags:
        - Roles
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RolesResponse"
        "204":
          description: No content found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
components:
  schemas:
    usersSchema:
      type: object
      properties:
        _id:
          type: string
          format: uuid
        name:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        # status:
        #   type: string
        #   enum:
        #     - active
        #     - inactive
        #   example: active
        address:
         type: object
         properties:
          street:
            type: string  
          suite:
            type: string
          city:
            type: string
          Zipcode:
            type: string
          geo:
            type: object
            properties:
             lat:
              type: string
             lng:
              type: string
        phone:
          type: string
        website:
          type: string
        company:
          type: array
          items:
            type: object
            properties:
             companyname:
              type: string
             catchPhrase:
              type: string
             bs:
              type: string
        createdBy:
          type: string
        createdAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2023-07-25T08:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Updation date and time
          example: "2023-07-25T08:30:00Z"

    postsSchema:
      type: object
      properties:
        _id:
          type: string
          format: uuid
        userid:
          type: string
          format: uuid
        title:
          type: string
        body:
          type: string
        images:
          type: array
          items: 
            type: string
            example: null
        likes:
          type: object
          properties:
           user:
            type: array
           items: 
            type: string
            example: null  
        comments:
            type: array
            items: 
               type: object
               properties:
                user:
                 type: string
                 format: uuid
                 $ref: '#/components/schemas/usersSchema'
                comments:
                 type: string
        createdBy:
          type: string
        createdAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2023-07-25T08:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Updation date and time
          example: "2023-07-25T08:30:00Z"       


         
        # status:
        #   type: string
        #   enum:
        #     - active
        #     - inactive
        #   example: active
        address:
         type: object
         properties:
          street:
            type: string  
          suite:
            type: string
          city:
            type: string
          Zipcode:
            type: string
          geo:
            type: object
            properties:
             lat:
              type: string
             lng:
              type: string
        phone:
          type: string
        website:
          type: string
        company:
          type: array
          items:
            type: object
            properties:
             companyname:
              type: string
             catchPhrase:
              type: string
             bs:
              type: string
        createdBy:
          type: string
        createdAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2023-07-25T08:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Updation date and time
          example: "2023-07-25T08:30:00Z"

    FetchPostsResponse:
     type: object
     properties:
      success:
        type: string
        example: true
      message:
        type: string
        example: 
      getposts:
          type: array
          items: 
            type: object
            $ref: '#/components/schemas/postsSchema'


    loginResponse:
      type: object
      properties:
        success:
          type: string
          example: true
        message:
          type: string
          example: login Successful
        data:
          type: array
          items: 
            type: object
            $ref: '#/components/schemas/usersSchema'

    FetchUsersResponse:
      type: object
      properties:
        data:
          type: array
          items: 
            type: object
            $ref: '#/components/schemas/usersSchema'
      
    LoginRequest:
      type: object
      properties:
        _id:
          type: string
          format: uuid
        name:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password  
              
    createPostRequest:
      type: object
      properties:
        userid:
          type: string
          format: uuid
        title:
          type: string
        body:
          type: string
        images:
          type: string
          format: email
       
      required:
        - userid
        - title        
        - body        
      
    RegisterRequest:
      type: object
      properties:
        _id:
          type: string
          format: uuid
        name:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        # status:
        #   type: string
        #   enum:
        #     - active
        #     - inactive
        #   example: active
        address:
         type: object
         properties:
          street:
            type: string  
            example: null
          suite:
            type: string
            example: null
          city:
            type: string
            example: null
          Zipcode:
            type: string
            example: null
          geo:
            type: object
            properties:
             lat:
              type: string
              example: null
             lng:
              type: string
              example: null
        phone:
          type: string
          example: null
        website:
          type: string
          example: null
        company:
          type: array
          items:
            type: object
            properties:
             companyname:
              type: string
              example: null
             catchPhrase:
              type: string
              example: null
             bs:
              type: string
              example: null
        createdBy:
          type: string
        deletedBy:
          type: string
          format: uuid
          example: null
        createdAt:
          type: string
          format: date-time
          description: Creation date and time
          example: "2023-07-25T08:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Updation date and time
          example: "2023-07-25T08:30:00Z"
      required:
        - username
        - email
        - password

    AdvisorRequest:
      type: object
      properties:
        name:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        status:
          type: string
          enum:
             - active
             - inactive
        rolesUUIDs:
          type: array
          items:
            type: string
            format: uuid
        instituteAbbreviations:
          type: array
          items:
            type: string
            example: FBR
        locations:
          type: array
          items:
            type: string
      required:
        - firstName
        - email
    EditAdvisorRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        status:
          type: string
          enum:
             - active
             - inactive
        rolesUUIDs:
          type: array
          items:
            type: string
            format: uuid
        instituteAbbreviations:
          type: array
          items:
            type: string
            example:
              - FBR
              - UEA
              - UNIB
        locations:
          type: array
          items:
            type: string
      required:
        - firstName
        - email
    RolesSchema:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: object
          properties:
            es_ES:
              type: string
              example: "Secretario Académico"
            en_US:
              type: string
              example: "Academic Secretary"
            pt_PT:
              type: string
              example: "Secretariado Académico"
            pt_BR:
              type: string
              example: "Secretariado Académico"
        abbreviation:
          type: string
          example: "SA"
        description:
          type: object
          properties:
             es_ES:
               type: string
               example: "Responsable de expedientes académicos"
             en_US:
               type: string
               example: "Responsible for academic records"
             pt_PT:
               type: string
               example: "Gestor de registos académicos"
             pt_BR:
               type: string
               example: "Gestor de registos académicos"
        status:
          type: string
          default: active
          enum:
            - active
            - inactive
    RolesResponse:
      type: object
      properties:
        roles:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/RolesSchema'
            